[{
    "name": "Harmonize",
    "teamSize":"4",
    "image":"./images/harmonize.jpg",
    "stackList": ["HTML", "CSS", "Firebase", "jQuery" ],
    "problem": "Looking for concerts can be tedious. There are many screens the user has to go through to find a concert they want, and often there are many distractions as they browse.",
    "solution": "We created Harmonize as a simple concert search engine. Users can search for specific artists and locations, log in to save favorites or just browse upcoming shows. Harmonize has a simple inteface with no distractions. Users can also purchase tickets from third party websites." ,
    "challenges": "Harmonize was my first time working with Firebase. I worked on user authentication and the database functionality to add and delete favorites. I followed the documentation and through trial and error got all aspects of the app to work. Our API also didn't have a filter by location option, so I had to write my own code to extract the location and compare it to the user input.",
    "functionality": "We spent a couple of days thinking about the user flow through the project. The first thing the user sees is the sign in or skip screen. Whichever one the user chooses, they get redirected to the same home screen. If you are logged in, you can save concerts to favorites, if not, you can only browse. The home page has two search bars, one for artist name, one for location. After the search is performed user recieves all matching results, if they click on a result they will see the map of the venue pop up, and also an option to save concert to favorites or buy tickets.",
    "design": "In this team project I was not responsible for the design.",
    "visitUrl":"https://innaleikina.github.io/Concert-Planner/",
    "codeUrl":"https://github.com/bpadil123/Concert-Planner",
    "screenshots":["../images/harmonize-1.jpg","../images/harmonize-2.jpg","../images/harmonize-3.jpg","../images/harmonize-5.jpg","../images/harmonize-6.jpg"]
},
{
    "name": "Chewzy",
    "teamSize":"2",
    "image":"./images/chewzy.jpg",
    "stackList": ["HTML", "CSS", "Handlebars", "Express", "Auth0", "jQuery", "MySQL","Node"],
    "problem": "Have you ever tried to figure out where to go eat? By the time everyone decides what they want, too much time has gone by, and you just have a frozen pizza. Chewzy is here to help you with this first world problem.",
    "solution": "Chewzy is a 5 question quiz that takes into account the users' mood and cusine preference and instantly provides five restaurants for the user to choose from. Users can also save restaurants to favorites to try out later.",
    "challenges": "Chewzy was a great project for solidifying my understanding of third party API calls. We used Zomato API for the initial search and then the Google Places and Google Details APIs to get more information about the restaurants. It was definitely a challenge passing data from page to page and avoiding the errors that pop up from JS being asynchronous. I worked with Auth0 for this project, and was able to create a Google log in for this app. I also created most of the routes and MySql queries.",
    "functionality": "We came up with a simple algorithm that determines what the user might like, depending on their answers to our quiz. We have 5 question categories, and each contains multiple questions that are randomized with every refresh. Whichever question gets the highest score makes an API call to the Zomato API with specific cuisine requirements. When an individual restaurant is chosen we use the restaurant name to make an API call to Google Places and Google details to get photos and contact information for that specific establishment.",
    "design": "With this color palette I wanted to keep it simple. Muted main colors and one bright color for highlighting buttons and other clickable elements. The background image is transparent to emphasize that this app is restaurant centered, but not beat the user over the head with it. I also designed the app to flow intuitively, first users get all the results, and then they can choose one place that they like. I was mostly able to keep to the sketch with the final design, but some things had to be changed. We only had one photo, and no map so the restaurant profile got simplified a lot. ",
    "visitUrl":"https://sleepy-sierra-59381.herokuapp.com/",
    "codeUrl":"https://github.com/oserenchenko/Chewzy",
    "sketch":"../images/chewzy-sketch.jpg",
    "screenshots":["../images/chewzy-1.jpg","../images/chewzy-2.jpg","../images/chewzy-3.jpg","../images/chewzy-4.jpg"]

},
{
    "name": "Scroll",
    "teamSize":"2",
    "image":"./images/scroll.jpg",
    "stackList": ["HTML", "CSS", "React", "Express", "MongoDB", "Axios", "JWT","Node","Passport"],
    "problem": "A lot of people consider themselves writers. It is very hard to get your work published. We wanted to make an app that makes it easier for writer's work to be seen by many people without going through a publisher.  ",
    "solution": "Scroll is a social networking app for writers. Writers can publish their work on Scroll and gain dedicated readers. Having a following can help writers when they approach publishers. Users who don't publish work, but only read will always have new reading material.  ",
    "challenges": "Scroll is built with mongodb. Our project has 3 collections, user, post and comment. All of the collections have to talk to each other, because the post has an author, it also has comments, but each comment also has an author. It was a challenge thinking through the database relationships, but once we found a pattern we were able to implement it everywhere.",
    "functionality": "Scroll uses React-Router and has protected routes. My partner wrote the Passport and Bcrypt authentication, once the user is signed in they can see all the pages. Users can follow other users, and they only see the posts of whom the follow on the home page. There is also a search page where users can look up posts or users by a search word. Users can comment and like on all posts. Users can also delete their own comments and posts. Users can log out. For the user's reading ease long texts are paginated. ",
    "design": "Scroll started with a color palette. The colors are reserved and muted to not take attention away from the writing. The whole design is minimalistic, nothing extra is present on the page, so the writing remains the main focus. Scroll was designed mobile first.",
    "visitUrl":"https://fast-beach-43726.herokuapp.com/",
    "codeUrl":"https://github.com/innaleikina/scroll",
    "sketch":"../images/scroll-sketch.jpg",
    "palette":"../images/scroll-palette.jpg",
    "screenshots":["../images/scroll-1.jpg","../images/scroll-2.jpg","../images/scroll-3.jpg","../images/scroll-4.jpg","../images/scroll-6.jpg","../images/scroll-7.jpg","../images/scroll-8.jpg","../images/scroll-9.jpg","../images/scroll-10.jpg"]
},
{
    "name": "Methodize",
    "teamSize":"3",
    "image":"./images/methodize.jpg",
    "stackList": ["HTML", "React", "Express", "MongoDB", "Redux", "Axios", "JWT", "Particles.js"],
    "problem": "Our team wanted to make a clone of Momentum Chrome extension with a Trello twist. ",
    "solution": "Methodize is a simple and clean to do list that also shows weather.",
    "challenges": "Methodize was built during a Chingu cohort, where 3 people from the same time zone build a project remotely over two months. I haven't worked with React before this, but the team decided on using React, so I had to learn. I did a lot of pair programingwith the other girl on the team who was also new to React. We built the whole front end together. At the time everything was a challenge, from the API calls to the Styled Components implementation. However it was an amazing experience and I am very proud of the final product.",
    "functionality": "Users need to log in to Methodize in order to access the website. Once the user is logged in they  have 3 to do columns that they can name whatever they want, they can also drag the to dos between the columns. Users can also input their location to see local weather. Users can log out.",
    "design": "Methodize was inspired by the Momentum Chrome extension. Momentum shows a new photo in the background every day, I simplified it, so the website shows a new photo on every refresh. I kept the design simple and modern, everything is white, and since the I hand picked the images, the white is easy to see on every background. To add an extra branding element to Methodize, I used Particles.js as a design element on the welcome page and on the home page of Methodize. ",
    "visitUrl":"https://methodize.herokuapp.com/",
    "codeUrl":"https://github.com/chingu-voyage4/Geckos-Team-19",
    "sketch":[],
    "screenshots":["../images/methodize-1.jpg","../images/methodize-2.jpg","../images/methodize-3.jpg","../images/methodize-4.jpg","../images/methodize-5.jpg"]
}]